import { supabase } from './supabaseClient';
import { Position, SavedPosition, SavedPositionItem } from '../types';

export const exportPositionsToSupabase = async (positions: Position[]): Promise<{ success: boolean; message: string; savedCount: number }> => {
  try {
    if (positions.length === 0) {
      return {
        success: false,
        message: '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        savedCount: 0
      };
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π –≤ Supabase:', positions.length);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    const positionsToSave = positions.map(position => ({
      position_number: position.positionNumber,
      service: position.service,
      total_price: position.totalPrice,
      total_income: position.totalIncome,
      total_expense: position.totalExpense,
      items_count: position.items.length,
      export_date: new Date().toISOString()
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
    const { data: savedPositions, error: positionsError } = await supabase
      .from('saved_positions')
      .insert(positionsToSave)
      .select();

    if (positionsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', positionsError);
      throw positionsError;
    }

    if (!savedPositions || savedPositions.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏');
    }

    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', savedPositions.length);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π
    const itemsToSave: Omit<SavedPositionItem, 'id' | 'created_at'>[] = [];

    positions.forEach((position, index) => {
      const savedPosition = savedPositions[index];
      if (!savedPosition) return;

      position.items.forEach(item => {
        itemsToSave.push({
          position_id: savedPosition.id,
          item_data: item,
          position_name: item.positionName,
          revenue: item.revenue,
          quantity: item.quantity,
          income_expense_type: item.incomeExpenseType,
          work_type: item.workType,
          salary_goods: item.salaryGoods
        });
      });
    });

    console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', itemsToSave.length);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∑–∏—Ü–∏–π –±–∞—Ç—á–∞–º–∏ (–ø–æ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    const batchSize = 100;
    let savedItemsCount = 0;

    for (let i = 0; i < itemsToSave.length; i += batchSize) {
      const batch = itemsToSave.slice(i, i + batchSize);
      
      const { error: itemsError } = await supabase
        .from('saved_position_items')
        .insert(batch);

      if (itemsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–±–∞—Ç—á):', itemsError);
        throw itemsError;
      }

      savedItemsCount += batch.length;
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±–∞—Ç—á: ${batch.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ: ${savedItemsCount}/${itemsToSave.length})`);
    }

    const message = `–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedPositions.length} –ø–æ–∑–∏—Ü–∏–π —Å ${savedItemsCount} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`;
    console.log('üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', message);

    return {
      success: true,
      message,
      savedCount: savedPositions.length
    };

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Supabase:', error);
    
    const errorMessage = error instanceof Error 
      ? error.message 
      : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏';

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${errorMessage}`,
      savedCount: 0
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
export const getSavedPositions = async (): Promise<SavedPosition[]> => {
  try {
    const { data, error } = await supabase
      .from('saved_positions')
      .select('*')
      .order('export_date', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', error);
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
export const getSavedPositionItems = async (positionId: string): Promise<SavedPositionItem[]> => {
  try {
    const { data, error } = await supabase
      .from('saved_position_items')
      .select('*')
      .eq('position_id', positionId)
      .order('created_at');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–∏:', error);
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
export const deleteSavedPosition = async (positionId: string): Promise<boolean> => {
  try {
    const { error } = await supabase
      .from('saved_positions')
      .delete()
      .eq('id', positionId);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
      throw error;
    }

    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞:', positionId);
    return true;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
    return false;
  }
};