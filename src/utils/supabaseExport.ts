import { supabase } from './supabaseClient';
import { Position, SavedPosition, SavedPositionItem } from '../types';

export const exportPositionsToSupabase = async (positions: Position[]): Promise<{ success: boolean; message: string; savedCount: number }> => {
  try {
    if (positions.length === 0) {
      return {
        success: false,
        message: '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        savedCount: 0
      };
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π –≤ Supabase:', positions.length);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    const positionsToSave = positions.map(position => ({
      position_number: position.positionNumber,
      service: position.service,
      total_price: position.totalPrice,
      total_income: position.totalIncome,
      total_expense: position.totalExpense,
      items_count: position.items.length,
      export_date: new Date().toISOString()
    }));

    console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', positionsToSave);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
    const { data: savedPositions, error: positionsError } = await supabase
      .from('saved_positions')
      .insert(positionsToSave)
      .select();

    if (positionsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', positionsError);
      throw positionsError;
    }

    if (!savedPositions || savedPositions.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏');
    }

    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', savedPositions.length);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏
    const itemsToSave: Omit<SavedPositionItem, 'id' | 'created_at'>[] = [];

    positions.forEach((position, index) => {
      const savedPosition = savedPositions[index];
      if (!savedPosition) return;

      position.items.forEach(item => {
        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–æ–ª–µ item_data
        const fullItemData = {
          // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
          id: item.id,
          uniqueKey: item.uniqueKey,
          positionName: item.positionName,
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –ø–æ–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
          year: item.year,
          month: item.month,
          quarter: item.quarter,
          date: item.date,
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –ø–æ–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          analytics1: item.analytics1,
          analytics2: item.analytics2,
          analytics3: item.analytics3,
          analytics4: item.analytics4,
          analytics5: item.analytics5,
          analytics6: item.analytics6,
          analytics7: item.analytics7,
          analytics8: item.analytics8,
          
          // –°—á–µ—Ç–∞
          debitAccount: item.debitAccount,
          creditAccount: item.creditAccount,
          
          // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          revenue: item.revenue,
          quantity: item.quantity,
          sumWithoutVAT: item.sumWithoutVAT,
          vatAmount: item.vatAmount,
          
          // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
          workType: item.workType,
          incomeExpenseType: item.incomeExpenseType,
          salaryGoods: item.salaryGoods
        };

        console.log(`üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${item.id}:`, {
          hasYear: !!item.year,
          hasMonth: !!item.month,
          hasDate: !!item.date,
          hasAnalytics1: !!item.analytics1,
          hasAnalytics8: !!item.analytics8,
          positionAnalytics1: position.analytics1,
          fullData: fullItemData
        });

        // –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –£–ü–î –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: analytics1 –ø–æ–∑–∏—Ü–∏–∏ -> analytics1 —ç–ª–µ–º–µ–Ω—Ç–∞ -> –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        const documentUPD = position.analytics1 || item.analytics1 || '';

        console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç –£–ü–î –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${item.id}:`, {
          fromPosition: position.analytics1,
          fromItem: item.analytics1,
          finalDocument: documentUPD
        });

        itemsToSave.push({
          position_id: savedPosition.id,
          item_data: fullItemData, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ
          position_name: item.positionName,
          revenue: item.revenue,
          quantity: item.quantity,
          income_expense_type: item.incomeExpenseType,
          work_type: item.workType,
          salary_goods: item.salaryGoods,
          document: documentUPD // –ù–û–í–û–ï –ø–æ–ª–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –£–ü–î
        });
      });
    });

    console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', itemsToSave.length);
    console.log('üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', itemsToSave[0]);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∑–∏—Ü–∏–π –±–∞—Ç—á–∞–º–∏ (–ø–æ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    const batchSize = 100;
    let savedItemsCount = 0;

    for (let i = 0; i < itemsToSave.length; i += batchSize) {
      const batch = itemsToSave.slice(i, i + batchSize);
      
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á ${Math.floor(i/batchSize) + 1}:`, {
        batchSize: batch.length,
        startIndex: i,
        endIndex: i + batch.length - 1,
        documentsInBatch: batch.map(item => ({ id: item.position_name, document: item.document }))
      });

      const { data: insertedItems, error: itemsError } = await supabase
        .from('saved_position_items')
        .insert(batch)
        .select();

      if (itemsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–±–∞—Ç—á):', itemsError);
        console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –±–∞—Ç—á:', batch);
        throw itemsError;
      }

      savedItemsCount += batch.length;
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±–∞—Ç—á: ${batch.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ: ${savedItemsCount}/${itemsToSave.length})`);
      
      if (insertedItems && insertedItems.length > 0) {
        console.log('‚úÖ –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', {
          id: insertedItems[0].id,
          position_name: insertedItems[0].position_name,
          document: insertedItems[0].document,
          work_type: insertedItems[0].work_type
        });
      }
    }

    const message = `–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedPositions.length} –ø–æ–∑–∏—Ü–∏–π —Å ${savedItemsCount} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç—ã –£–ü–î)`;
    console.log('üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', message);

    return {
      success: true,
      message,
      savedCount: savedPositions.length
    };

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Supabase:', error);
    
    const errorMessage = error instanceof Error 
      ? error.message 
      : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏';

    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${errorMessage}`,
      savedCount: 0
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
export const getSavedPositions = async (): Promise<SavedPosition[]> => {
  try {
    const { data, error } = await supabase
      .from('saved_positions')
      .select('*')
      .order('export_date', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', error);
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
export const getSavedPositionItems = async (positionId: string): Promise<SavedPositionItem[]> => {
  try {
    const { data, error } = await supabase
      .from('saved_position_items')
      .select('*')
      .eq('position_id', positionId)
      .order('created_at');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–∏:', error);
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
export const deleteSavedPosition = async (positionId: string): Promise<boolean> => {
  try {
    const { error } = await supabase
      .from('saved_positions')
      .delete()
      .eq('id', positionId);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
      throw error;
    }

    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞:', positionId);
    return true;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
    return false;
  }
};